<?php
//    / **
//    *由PhpStorm创建。
//    *用户：管理员
//    *日期：2020/8/22
//    *时间：12:48
//    * /
namespace app\api\controller;
use DsfApi\PddApi;
use think\facade\Db;
use app\Request;
//use think\Request;
use think\facade\Session;
use think\facade\Cache;
use fast\Image;
use fast\Redis;
use DsfApi\TaoBao;
class Pnduoduo extends Api {
    protected  $accessToken;
    protected  $pddarray;
    public  function initialize(){
        parent::initialize(); // TODO: Change the autogenerated stub
        $pddauth = Db::name('business_application_platform') -> where('name','pdd')  -> field('appkey,appsecret,redirect_uri') -> find();
        $config = array(
            'client_id' =>$pddauth['appkey'], //client_id
            'client_secret' => $pddauth['appsecret'], //client_secret
            'backurl' => $pddauth['redirect_uri'], //回调地址
            'data_type' => 'json', // 返回数据格式
            'pdd_token_file' => __DIR__ . '/pdd_token.txt', // token存储文件地址
        );
        $this -> pddarray = new PddApi($config);
        $owner_name = input('owner_name');
//         if(empty($owner_name)){
//             exit(json_encode($this -> error('401','店铺账号不能为空!'))) ;
//         }

        $res = Db::name('shop_open_user')
            -> field('mall_name,access_token,refresh_token,endtime,owner_name,owner_id,is_token')
            -> where(['shop_type'=>'pdd','owner_name'=>$owner_name])
            -> find();
//        if($res['is_token'] != 1){
//            exit(json_encode($this -> error('403','此店铺没有授权!'))) ;
//        }

//        if(time() - $res['endtime'] > 2*60*60){
//            exit(json_encode($this -> error('403','此店铺授权过期，请重新授权!'))) ;
//        }
        Db::name('shop_open_user')
            -> where(['shop_type'=>'pdd','owner_name'=>$owner_name])
            -> update(['endtime'=>time()]);
         $this -> accessToken = $res['access_token'];
    }

//    public function
    //获取店铺信息
    public function getShopInfo(Request $request){
        $owner_name = $request -> get['owner_name'];
        if(empty($owner_name)){
            exit(json_encode($this -> error('401','店铺账号不能为空!'))) ;
        }
        $res = Db::name('shop_open_user')
            -> field('mall_name,access_token,refresh_token,endtime,owner_name,owner_id,is_token')
            -> where(['shop_type'=>'pdd','owner_name'=>$owner_name])
            -> find();
//        if($res['is_token'] != 1){
//            exit(json_encode($this -> error('403','此店铺没有授权!'))) ;
//        }
//        if(time() - $res['endtime'] > 2*60*60){
//            exit(json_encode($this -> error('403','此店铺授权过期，请重新授权!'))) ;
//        }
        Db::name('shop_open_user')
            -> where(['shop_type'=>'pdd','owner_name'=>$owner_name])
            -> update(['endtime'=>time()]);
        $result  = $this -> pddarray -> request('pdd.mall.info.get',['access_token' => $res['access_token']]);
        return $result;
    }


    //导入拼多多图片信息
    public function pdduploadpic(Request $request){
        $type = $request->post('type');
        $goodsid = $request->post('goodid');
        if(empty($goodsid)){
            return $this -> error('401','商品ID不能为空!');
        }
//        $goodsid = "629385298883";
        $res = TaoBao::goodsinfo($goodsid);
        Cache::set($type.$goodsid,$res);
        //商品标题
        Redis::set($goodsid. '_title',$res['title'], 604800);
        //商品主图
        $str = substr($res['pic_url'],-3);
        $ztimgurl = '';
        if($str == 'jpg' || $str == 'png'){
            $ztimgurl = $this -> imgupload($res['pic_url'],1,700,700);
        }

        Redis::set($goodsid . '_product_ztimg', serialize($ztimgurl), 604800);
        $pddlunbo = [];//轮播图
        $images = $res['item_imgs'];
        if(count($images) > 15){
            $imgeq =  array_slice($images,0,15);
        }else{
            $imgeq = $images;
        }

        foreach ($imgeq as $v){
            $str = substr($v,-3);
            if($str == 'jpg' || $str == 'png'){
                $esimg = $this -> imgupload($v,1,700,700);
                if($esimg){
                    $pddlunbo[]   = $esimg;
                }
            }
        }
        Redis::set($goodsid . '_product_images_url', serialize($pddlunbo), 604800);
//        Redis::Del($goodsid .'_product_descImg');
//        $descImg = Redis::get($goodsid . '_product_descImg');
        $desc_img = []; //详情图
        $desc_img1 = $res['desc_img'];
        if(count($res['desc_img']) >= 30){
            $desc_img2 =  array_slice($res['desc_img'],0,30);
        }else if(count($res['desc_img']) == 0){
            $desc_img2 = $res['item_imgs'];
        }else{
            $desc_img2 = $res['desc_img'];
        }
        foreach ($desc_img2 as $v){
            $desc_img[] = $this -> imgupload($v,1,700,700);
        }
        foreach ($desc_img as $k => $v){
            if($v == null){
                unset($desc_img[$k]);
            }
        }
        $desc_img1 = array_merge($desc_img);
        Redis::set($goodsid . '_product_descImg', serialize($desc_img1), 604800);
        $data['pic_url'] = unserialize(Redis::get($goodsid . '_product_ztimg'));
        $data['msg'] = "上传图片成功";
        // $data['images_url'] = unserialize(Redis::get($goodsid . '_product_images_url'));
//         $data['desc_img'] = unserialize(Redis::get($goodsid . '_product_descImg'));
        $data['goodsid'] = $goodsid;
        return $this->success('200','获取成功', $data);
    }

    //导入上传
    public function pdduploadinfo(Request $request){
        $type = $request->post('type');
        $goodsid = $request->post('goodid') ;
        $filerprice = $request->post('filerprice')  ;//团购价
        $filergeprice = $request->post('filergeprice') ;//单卖价
        if (empty($goodsid)) {
            return $this->error('401', '商品ID不能为空!');
        }
        $res = Cache::get($type . $goodsid);
//        dump(count( $res['skus_list']));die;
        switch ($type) {
            case 'taobao':
                $rescate = TaoBao::goodcate($goodsid);
                break;
        }
        //查询类目
        $str = '';
        if(mb_strlen($rescate['cat_name']) > 2){
            $str .= mb_substr($rescate['cat_name'], -2,2,'utf-8');
        }else{
            $str .= $rescate['cat_name'];
        }
        $wherecname = [
            ['cat_name', 'like', "%".$str."%"],
        ];

        $cat_id = Db::name('pdd_goods_cat') -> where('level = 3 or level =4')->where($wherecname)-> value('cat_id');
        if (!empty($cat_id)) {
            //商品sku列表
            $sku_list = $this->skus_list($cat_id, $res['skus_list'], $res['prop_imgs'],$filerprice,$filergeprice);
            Redis::set($goodsid . '_sku_list', serialize($sku_list), 604800);
            //商品属性
            $goods_properties = $this->getAttrcats($cat_id, $res['props'], $res['pic_url']);
            Redis::set($goodsid . '_attr', serialize($goods_properties), 604800);
            $data['cat_id'] =   $this->getcat_id($wherecname);
            $data['desc_short'] = $res['desc_short'];//商品简介
            $data['out_goods_id'] = "WPK-T-" . $res['goodsid']; //商品外部编码
//            $data['carousel_video'] = json_encode([]);
            Redis::set($goodsid . '_info', serialize($data), 604800);

//        $tprice = (int)$filerprice * 100; //团价
//        $gprice = (int)$filergeprice * 100; //单价
        }
        $sudata['msg'] = "上传详情成功";
        $sudata['goodsid'] = $goodsid;
        return $this->success('200', '上传图片成功', $sudata);
    }
    //开始上传
    public function pddgoodsadd(Request $request){
        $template_id = $request->post('template_id') ?? '147120650715681';
        $goods_type = $request->post('goods_type') ?? 1; //1-国内普通商品，2-进口
        $goodsid = $request->post('goodid') ?? '567892068402';
        $type = $request->post('type');
        if(empty($template_id)){
            return $this -> error('401','运费模板不能为空!');
        }
        if(empty($goodsid)){
            return $this -> error('401','商品ID不能为空!');
        }
        $skulist = unserialize(Redis::get($goodsid.'_sku_list'));
        $last_names = array_column($skulist,'price');
        array_multisort($last_names,SORT_DESC,$skulist);
        $pddsku = unserialize(Redis::get($goodsid.'_info'));
//        dump(unserialize(Redis::get($goodsid.'_info')));die;
        $pdd_data = [
            'access_token' => $this -> accessToken,
            'bad_fruit_claim'=>'',
            'buy_limit'=>'',//限购次数   非必填
            'carousel_video' => '[]',
            'carousel_video_url'=>'',
            'cat_id'=> $pddsku['cat_id'], //叶子类目ID
            'cost_template_id' => $template_id, //物流运费模板ID，可使用pdd.logistics.template.get获取
            'country_id' => 0,//国家ID，country_id可以通过pdd.goods.country.get获取
            'customer_num' => '',//团购人数    非必填
            'customs' => '',//非必填
            'delivery_one_day' => 0,//	是否当日发货,0 否，1 是  非必填
            'carousel_gallery'=> json_encode(unserialize(Redis::get($goodsid.'_product_images_url'))), //商品轮播图
            'detail_gallery'=> json_encode(unserialize(Redis::get($goodsid.'_product_descImg'))),//商品详情图
            'elec_goods_attributes'=>'',
            'goods_name'=> Redis::get($goodsid. '_title') ,//	商品标题
            'goods_desc' => $pddsku['desc_short'],//商品描述
            'goods_properties'=> json_encode(unserialize(Redis::get($goodsid.'_attr'))),//	商品属性列表  非必填
            'goods_trade_attr' => '',//日历商品交易相关信息   非必填
            'goods_travel_attr'=> '',//商品出行信息  非必填
            'goods_type' => $goods_type,//1-国内普通商品，2-进口
            'image_url'=> unserialize(Redis::get($goodsid.'_product_ztimg')),//	商品主图
            'invoice_status' => 0,//是否支持开票（测试中）
            'is_customs' => 'false',//是否需要上报海关，false-无需上报海关，true-需上报海关  非必填
            'is_folt' => 'true',//是否支持假一赔十，false-不支持，true-支持
            'is_pre_sale' => 'false',//是否预售,true-预售商品，false-非预售商品
            'is_refundable' => 'true',//是否7天无理由退换货，true-支持，false-不支持
            'second_hand' => 'false',//是否二手商品，true -二手商品 ，false-全新商品
            'lack_of_weight_claim'=>0 ,//缺重包退  非必填
            'mai_jia_zi_ti' => '',
            'market_price' => $skulist[0]['price'] + 1000,//市场价格，单位为分
            'order_limit' => 999999,//单次限量   非必填
            'origin_country_id' => '',//原产地id  非必填
            'out_goods_id' => $pddsku['out_goods_id'],//商品编码
            'oversea_goods'=>'', //非必填
            'oversea_type' => 0,//非必填
            'pre_sale_time' => 0,//预售时间，is_pre_sale为true时必传   非必填
            'quan_guo_lian_bao' => 0,//0：不支持全国联保；1：支持全国联保
            'shang_men_an_zhuang' => '',//上门安装模版id  非必填
            'shipment_limit_second' => 48*3600,
            'size_spec_id' => '',//尺码表id  非必填
            'sku_list' => json_encode(unserialize(Redis::get($goodsid.'_sku_list'))),
            'sku_type' => 0,//	库存方式（0：普通型，1：日历型）
            'song_huo_an_zhuang' => '',//送货入户并安装模版id  非必填
            'song_huo_ru_hu' => '',//送货入户模版id  非必填
            'tiny_name' => '',//短标题，示例：新包装   非必填
            'warehouse' => '',//非必填
            'warm_tips' => '',//买家自提模版id
            'zhi_huan_bu_xiu' => 0,//只换不修的天数，目前只支持0和365  非必填
        ];
        $result  = $this -> pddarray ->request('pdd.goods.add',$pdd_data);
        if($result['error_response']){
            $data['msg'] = $result['error_response']['error_msg'];
        }else{
            Redis::set("WPK-T-".$goodsid,''.$goodsid,604800);
            $data['msg'] = '上传成功';
//            $this -> goodsrelation($result['goods_add_response']['goods_id'],$type,$goodsid);
        }
        $data['goodsid']  = $goodsid;
        return $this->success('200','上传成功', $data);
//
    }

    //商品关联信息设置接口
    public function goodsrelation($goods_id,$type,$goodsid){
        $res = Cache::get($type . $goodsid);
        $last_names = array_column($res['skus_list'],'price');
        array_multisort($last_names,SORT_DESC,$res['skus_list']);
        $startp = count($res['skus_list'])-1;
        $data = [
            'goods_id' => $goods_id,//拼多多商品id
            'out_detail_url' => $res['detail_url'],//外部平台商品url
            'out_goods_id' => $goodsid,//外部平台商品id
            'out_high_goods_price' => $res['skus_list'][0]['price'],//外部平台商品最高价，单位：分
            'out_low_goods_price' => $res['skus_list'][$startp]['price'],//外部平台商品最低价，单位：分
            'out_mall_id' =>'',//外部平台店铺id
            'postage' => '',//邮费
            'source_type' => $this -> source_type($type)//外部平台
        ];
//        pdd.goods.relation.set
    }



    /*上传图片
    * $type 类型 1压缩尺寸 0 不压缩
    */
    public function imgupload($images,$type="",$iwidth="",$iheight=""){
        if(empty($images)){
            return false;
        }
        if(strpos($images,'https:') !== false){
            $imageurl = Image::imgtobase64($images,$type,$iwidth,$iheight);
        }elseif(strpos($images,'http:') !== false){
            $imageurl = Image::imgtobase64($images,$type,$iwidth,$iheight);
        }else{
            $imageurl = Image::imgtobase64("http:".$images,$type,$iwidth,$iheight);
        }
        $result  = $this -> pddarray->request('pdd.goods.image.upload',[ 'access_token' =>$this -> accessToken,'image'=>$imageurl]);
        $imgurl = $result['goods_image_upload_response']['image_url'];
        return  $imgurl;
    }


    /*  获取商品的sku
         *  $pdd_catid 商品类目id
         *   $resskulist  sku 数据
         *   $thumb_urls 缩略图
         * */
    protected function skus_list($pdd_catid,$resskulist,$thumb_urls,$filerprice,$filergeprice){
        $oversea_sku = [
            "measurement_code" => '001',//计量单位编码，从接口pdd.gooods.sku.measurement.list获取code
            "specifications" => "2",//规格
            "taxation" => 100,//税费
        ];
        $thumburl = [];
        foreach ($thumb_urls as $k => $v) {
            $thumburl[$v['properties']] = $v['url'];
        }
        $sku_list = [];
        foreach ($resskulist as $key => $val){
            $propImg = explode(';', $val['properties_name']);
            $ysstr = '';
            $a = '';
            $b = '';
            $cmstr = '';
            $c = '';
            $ccstr = '';
            foreach ($propImg as $v) {
                if ( strpos($v, '颜色')) {
                    $a = strpos($v, '颜色');
                    $ysstr = $v;
                }
                if(strpos($v, '尺码')){
                    $b = strpos($v, '尺码');
                    $cmstr = $v;
                }
                if(strpos($v, '尺寸')){
                    $c = strpos($v, '尺寸');
                    $ccstr = $v;
                }
            }
            $ye = substr($ysstr, $a, strlen($ysstr));
            $cm = substr($cmstr, $b, strlen($cmstr));
            $cc = substr($cmstr, $c, strlen($ccstr));
            $propImgNum = substr($ysstr, 0, $a - 1);
            $sku_list[$key]['is_onsale'] = 1;
            $sku_list[$key]['limit_quantity'] = 999;
            $sku_list[$key]['weight'] = 1000;
            $multi_price = $val['price'] * 100 * floatval($filerprice);
            $sku_list[$key]['multi_price'] = $multi_price;
            $sku_list[$key]['price'] =  $multi_price + (int)$filergeprice * 100;//($val['price'] + $filergeprice) * 100
            $sku_list[$key]['thumb_url'] = $this -> imgupload($thumburl[$propImgNum]);
            $sku_list[$key]['out_sku_sn'] = "";//商品sku外部编码
//            $spec_id_list = $this ->skupc_list($pdd_catid,$ye,$cm,'','','');
//            $sku_list[$key]['spec_id_list'] = $spec_id_list;
            $sku_list[$key]['spec_id_list'] = $this ->skupc_list($pdd_catid,$ye,$cm,$cc,'','');
            $sku_list[$key]['quantity'] = $val['quantity'];
            $sku_list[$key]['oversea_sku'] = $oversea_sku;
            $sku_list[$key]['length'] = '';
        }
        //        过滤sku为空的spec_id_list、thumb_url字段
        foreach ($sku_list as $key => $val){
            if($val['spec_id_list'] == '[]' || $val['thumb_url'] == ''){
                unset($sku_list[$key]);
            }
        }
        $sku_list1 = array_merge($sku_list);
        return $sku_list1;
    }
    //商品规格值ID
    protected function skupc_list($cat_id,$ye ="",$cm="",$cc='',$rs='',$r1=''){
        $yearr = explode(':',$ye);
        $cmarr = explode(':',$cm);
        $ccarr = explode(':',$cc);
        $yestr = '';
        if(strpos($yearr[1],'预售') !== false){
            $yestr .= mb_substr($yearr[1], 0,2,'utf-8');
        }else{
            $yestr .= $yearr[1];
        }
        $yespecid = $this -> getpddskuSpecs($cat_id,substr($yearr[0],0,6),$yestr);
        $cmspecid = $this -> getpddskuSpecs($cat_id,$cmarr[0],$cmarr[1]);
        $ccspecid = $this -> getpddskuSpecs($cat_id,$ccarr[0],$ccarr[1]);
        $str = [];
        if($yespecid){
            $str[] = $yespecid;
        }
        if($cmspecid){
            $str[] = $cmspecid;
        }
        if($ccspecid){
            $str[] = $ccspecid;
        }
        $str = json_encode($str);
        return $str;
    }
    //获取该分类下所有规格属性
    protected  function getpddskuSpecs($cat_id,$spec_cate,$specname){
        $result  = $this -> pddarray->request('pdd.goods.spec.get',['access_token' =>$this -> accessToken,'cat_id'=>$cat_id]);
        $result = $result['goods_spec_get_response']['goods_spec_list'];
        $specid = '';
        foreach ($result as $item) {
            if($item['parent_spec_name'] == $spec_cate){
                $specid = $item['parent_spec_id'] ;
            }
        }
        $spec_ids =  $this -> getpddskuSpecsId($specid,$specname);
        return $spec_ids;
    }

    /*  根据pdd.goods.spec.id.get生成的规格属性id
     * $parent_spec_id  拼多多标准规格ID
     * $spec_name 商家编辑的规格值
     * */
    protected  function getpddskuSpecsId($specid,$spec_name){
        $result  = $this -> pddarray->request('pdd.goods.spec.id.get',['access_token' =>$this -> accessToken,'parent_spec_id'=>$specid,'spec_name'=>$spec_name]);
        return $result['goods_spec_id_get_response']['spec_id'];
    }



    //获取商品信息
    public function goodsdetlits(){
        $result  = $this -> pddarray ->request('pdd.goods.detail.get',['goods_id'=>132500610412]);
    }

    //获取运费模板
    public function getTemplates(){
        $result  = $this -> pddarray ->request('pdd.goods.logistics.template.get',['access_token' =>$this -> accessToken]);
        $templats = $result['goods_logistics_template_get_response']['logistics_template_list'];

        if($templats == null){
            return $this -> error($result['error_response']['error_code'],$result['error_response']['error_msg']) ;
        }
        $arr = [];
        foreach ($templats as $key => $val){
            $arr[$key]['template_name'] = $val['template_name'];//运费模板名称
            $arr[$key]['template_id'] = $val['template_id'];//	模板id
        }
        return $this -> success('200','获取运费模板成功',$arr);
    }

    //获取商品类目id
    protected  function getcat_id($cname){
        $where = " level > 2";
        $catids = Db::name('pdd_goods_cat') -> where($where) -> where($cname) -> select();
//        dump(Db::name('pdd_goods_cat') -> getLastSql());die;
        $catids = array_sort($catids,'level','desc');
        $catids = array_slice($catids,0,1);
        $catid = $catids[0]['cat_id'];
        return $catid;
    }

    //获取原产地
    protected  function selectCountry(){
        $result  = $this -> pddarray->request('pdd.goods.country.get',['access_token' =>$this -> accessToken]);
        $result = $result['goods_country_get_response']['country_list'];
        return $result;
    }

    //获取商品属性
    protected function getAttrcats($cat_id,$data){
        $result  = $this -> pddarray->request('pdd.goods.cat.template.get',['access_token' =>$this -> accessToken,'cat_id'=>$cat_id]);
        $res = $result['open_api_response']['properties'];
        $arr = [];
        foreach ($res as $key => $val){
            foreach ($data as $k => $v){
                if($val['name_alias'] == $v['name']){
                    $arr[$key]['name'] = $val['name_alias'];
                    $arr[$key]['ref_pid'] = $val['ref_pid'];
                    $arr[$key]['spec_id'] = $res['open_api_response']['id'];
                    foreach ($val['values'] as $k1 => $v1){
                        if($v1['value']== $v['value']){
                            $arr[$key]['vvalue'] = $v1['value'];
                            $arr[$key]['vid'] = $v1['vid'];
                        }
                    }
                }
            }
        }
        $arr = array_merge($arr);
        $goods_properties = [];
        foreach ($arr as $key => $val){
            $goods_properties[$key]['group_id'] = '';//组id
            $goods_properties[$key]['img_url'] = '';//图片url
            $goods_properties[$key]['note'] = '';//备注
            $goods_properties[$key]['parent_spec_id'] = '';//父属性id
            $goods_properties[$key]['ref_pid'] = $val['ref_pid'];//	引用属性id
            $goods_properties[$key]['spec_id'] = $val['spec_id'];
            $goods_properties[$key]['template_pid'] = '';
            $goods_properties[$key]['value'] = $val['vvalue'];//属性值
            $goods_properties[$key]['value_unit'] = '';//属性单位
            $goods_properties[$key]['vid'] = $val['vid'];//属性值id
        }
//        dump($goods_properties);die;
        return $goods_properties;
    }







    //商品sku计量单位枚举
    public function getskumeasurement(){
        $result  = $this -> pddarray->request('pdd.gooods.sku.measurement.list',['access_token' =>$this -> accessToken]);
        $result = $result['gooods_sku_measurement_list_response'];
        return $result;
    }

    public function source_type($type){
        $type_id = '';
        switch ($type){
            case 'taobao':
            case 'tmall' :
                $type_id = 0;
                break;
            case 'jd':
                $type_id = 1;
                break;
            case '1688':
                $type_id = 2;
                break;
            case 'wph':
                $type_id = 3;
                break;
            case 'sn':
                $type_id = 4;
                break;
            case 'ymx':
                $type_id = 5;
                break;
            case 'wy':
                $type_id = 6;
                break;
            case 'wd':
                $type_id = 8;
                break;
            case 'wsy':
                $type_id = 9;
                break;
            case 'mgj':
                $type_id = 10;
                break;
        }

//        外部平台枚举值， 0-淘宝/天猫 ，1-京东，2-1688，
//3-唯品会，4-苏宁，5-亚马逊，6-网易，8-微店，
//9-网商园，10-蘑菇街，11-vvic搜款网，12-搜鞋网，
//13-一起做网店17zwd，14-杭州女装网，15-折800，
//16-当当，17-青创网，18-开山网，19-新款网, 
//20-文轩网，21-博库网，22-四季星座网, 23-童商网，
//24-淘羊网, 25-成都购商云汇网

    }




    /* 获取拼多多类目树
            * $pid  父类id
            */
    protected  function PddcateTree($pid){
        $cate = [];
        $result  = $this -> pddarray->request('pdd.goods.cats.get',['access_token' =>$this -> accessToken,'parent_cat_id'=>$pid]);
//        if(!$result['goods_cats_get_response']['goods_cats_list']){
//            epre($result['error_response']);exit;
//        }
        foreach ($result['goods_cats_get_response']['goods_cats_list'] as $key => $val){
            $cate[$key]['level'] = $val['level'];
            $cate[$key]['cat_id'] = $val['cat_id'];
            $cate[$key]['parent_cat_id'] = $val['parent_cat_id'];
            $cate[$key]['cat_name'] = $val['cat_name'];
        }
        return $cate;
    }



    //获取到当前商家可发布类目树
    public  function pddTree(){
//        $result  = $this -> pddarray->request('pdd.goods.cats.get',['parent_cat_id'=>17428]);//
//        epre($result);exit;

        //判断一级类目是否存在
        $treecate1 = Db::name('pdd_goods_cat') -> where('level',1) -> select();
        if(empty($treecate1)){
            //获取一级类目
            $cate1 = self::PddcateTree(0);
            foreach ($cate1 as $key => $val){
                $val['create_time'] = date('Y-m-d H:i:s',time());
                $val['end_time'] = getday()['month'];
                $res = Db::name('pdd_goods_cat') -> where('cat_id',$val['cat_id']) -> find();
                if(empty($res)){
                    Db::name('pdd_goods_cat') -> insert($val);
                }
            }
        }else{
            $catetreetime2 = Db::name('pdd_goods_cat') -> where('level',1) -> value('end_time');
            if(time() - strtotime($catetreetime2) > 0){
                $cate1 = self::PddcateTree(0);
                foreach ($cate1 as $k1=>$v2){
                    $v2['end_time'] = getday()['month'];
                    Db::name('pdd_goods_cat') -> where('cat_id',$v2['cat_id']) -> update($v2);
                }
            }
//            foreach ($treecate1 as $key => $val){
//                if(time() - strtotime($val['end_time']) > 0){
//
//                }
//            }
        }

        //判断二级分类
        $treecate2 = Db::name('pdd_goods_cat') -> where('level',2)  -> select();
        $cate3 =[];
        if(empty($treecate2)){
            foreach ($treecate1 as $key => $val){
                $cate2[$key] = self::PddcateTree($val['cat_id']);
                $cate3 = array_merge_recursive($cate3,$cate2[$key]);
            }
            foreach ($cate3 as $key => $val){
                $val['create_time'] = date('Y-m-d H:i:s',time());
                $val['end_time'] = getday()['week'];
                $res = Db::name('pdd_goods_cat') -> where('cat_id',$val['cat_id']) -> find();
                if(empty($res)){
                    Db::name('pdd_goods_cat') -> insert($val);
                }
            }
        }else{
            //查询二级分类到期更新时间
            $catetreetime2 = Db::name('pdd_goods_cat') -> where('level',2) -> value('end_time');
            if(time() - strtotime($catetreetime2) > 0){
                foreach ($treecate1 as $key => $val){
                    sleep(1);
                    $cate2[$key] = self::PddcateTree($val['cat_id']);
                    $cate3 = array_merge_recursive($cate3,$cate2[$key]);
                }
                foreach ($cate3 as $k1=>$v2){
                    $v2['end_time'] = getday()['week'];
                    Db::name('pdd_goods_cat') -> where('cat_id',$v2['cat_id']) -> update($v2);
                }
            }
        }

        //判断三级分类
        $treecate3 = Db::name('pdd_goods_cat') -> where('level',3) -> select();
        if(empty($treecate3)){
            $cate4 =[];
            $cate5 =[];
            $result = Db::name('pdd_goods_cat') -> where('level',2)
                ->where('id','>',107) -> where('id','<',707) -> select();
            foreach ($result as $key => $val){
                $cate31[$key] = self::PddcateTree($val['cat_id']);
                $cate4 = array_merge_recursive($cate4,$cate31[$key]);
            }
            foreach ($cate4 as $key => $val){
                $val['create_time'] = date('Y-m-d H:i:s',time());
                $val['end_time'] = getday()['week'];
                $res = Db::name('pdd_goods_cat') -> where('cat_id',$val['cat_id']) -> find();
                if(empty($res)){
                    Db::name('pdd_goods_cat') -> insert($val);
                }
            }
            $result1 = Db::name('pdd_goods_cat') -> where('level',2)
                ->where('id','>',707) -> where('id','<',1443) -> select();
            foreach ($result1 as $key => $val){
                $cate32[$key] = self::PddcateTree($val['cat_id']);
                $cate5 = array_merge_recursive($cate5,$cate32[$key]);
            }

            foreach ($cate5 as $key => $val){
                $val['create_time'] = date('Y-m-d H:i:s',time());
                $val['end_time'] = getday()['week'];
                $res = Db::name('pdd_goods_cat') -> where('cat_id',$val['cat_id']) -> find();
                if(empty($res)){
                    Db::name('pdd_goods_cat') -> insert($val);
                }
            }
        }else{
            //查询三级分类到期更新时间
            $catetreetime3 = Db::name('pdd_goods_cat') -> where('level',3) -> value('end_time');
            if(time() - strtotime($catetreetime3) > 0){
                echo 222222222;exit;
            }
        }
        //判断四级分类
        $treecate4 = Db::name('pdd_goods_cat') -> where('level',4) -> select();
        if(empty($treecate4)){
            $cate61 =[];
            if(empty(Session::get('insertcate41'))){
                $result = Db::name('pdd_goods_cat') -> where('level',3)
                    ->where('id','>',1443) -> where('id','<',2443) -> select();
                foreach ($result as $key => $val){
                    $result11  = $this -> pddarray->request('pdd.goods.cats.get',['parent_cat_id'=>$val['cat_id']]);
                    $cate41[$key] = $result11['goods_cats_get_response']['goods_cats_list'];
                    $cate61 = array_merge_recursive($cate61,$cate41[$key]);
                }
                Session::set('insertcate41',$cate61);
            }
            foreach (Session::get('insertcate41') as $key => $val){
                $val['create_time'] = date('Y-m-d H:i:s',time());
                $val['end_time'] = getday()['week'];
                $res = Db::name('pdd_goods_cat') -> where('cat_id',$val['cat_id']) -> find();
                if(empty($res)){
                    Db::name('pdd_goods_cat') -> insert($val);
                }
            }
//            epre(Session::get('insertcate41'));
            $cate62 =[];
            if(empty(Session::get('insertcate42'))){
                $result1 = Db::name('pdd_goods_cat') -> where('level',3)
                    ->where('id','>',2443) -> where('id','<',3443) -> select();
                foreach ($result1 as $key => $val){
                    $cate42[$key] = self::PddcateTree($val['cat_id']);
                    $cate62 = array_merge_recursive($cate62,$cate42[$key]);
                }
                Session::set('insertcate42',$cate62);
            }
            foreach (Session::get('insertcate42') as $key => $val){
                $val['create_time'] = date('Y-m-d H:i:s',time());
                $val['end_time'] = getday()['week'];
                $res = Db::name('pdd_goods_cat') -> where('cat_id',$val['cat_id']) -> find();
                if(empty($res)){
                    Db::name('pdd_goods_cat') -> insert($val);
                }
            }


            $cate63 =[];
            if(empty(Session::get('insertcate43'))){
                $result2 = Db::name('pdd_goods_cat') -> where('level',3)
                    ->where('id','>',3443) -> where('id','<',4443) -> select();
                foreach ($result2 as $key => $val){
                    $cate43[$key] = self::PddcateTree($val['cat_id']);
                    $cate63 = array_merge_recursive($cate63,$cate43[$key]);
                }
                Session::set('insertcate43',$cate63);
            }
            foreach (Session::get('insertcate43') as $key => $val){
                $val['create_time'] = date('Y-m-d H:i:s',time());
                $val['end_time'] = getday()['week'];
                $res = Db::name('pdd_goods_cat') -> where('cat_id',$val['cat_id']) -> find();
                if(empty($res)){
                    Db::name('pdd_goods_cat') -> insert($val);
                }
            }


            $cate64 =[];
            if(empty(Session::get('insertcate44'))){
                $result3 = Db::name('pdd_goods_cat') -> where('level',3)
                    ->where('id','>',4443) -> where('id','<',5443) -> select();
                foreach ($result3 as $key => $val){
                    $cate44[$key] = self::PddcateTree($val['cat_id']);
                    $cate64 = array_merge_recursive($cate64,$cate44[$key]);
                }
                Session::set('insertcate44',$cate64);
            }
            foreach (Session::get('insertcate44') as $key => $val){
                $val['create_time'] = date('Y-m-d H:i:s',time());
                $val['end_time'] = getday()['week'];
                $res = Db::name('pdd_goods_cat') -> where('cat_id',$val['cat_id']) -> find();
                if(empty($res)){
                    Db::name('pdd_goods_cat') -> insert($val);
                }
            }
            $cate65 =[];
            if(empty(Session::get('insertcate45'))){
                $result4 = Db::name('pdd_goods_cat') -> where('level',3)
                    ->where('id','>',5443) -> where('id','<',6443) -> select();

                foreach ($result4 as $key => $val){
                    $cate45[$key] = self::PddcateTree($val['cat_id']);
                    $cate65 = array_merge_recursive($cate65,$cate45[$key]);
                }
                Session::set('insertcate45',$cate65);
            }
            foreach (Session::get('insertcate45') as $key => $val){
                $val['create_time'] = date('Y-m-d H:i:s',time());
                $val['end_time'] = getday()['week'];
                $res = Db::name('pdd_goods_cat') -> where('cat_id',$val['cat_id']) -> find();
                if(empty($res)){
                    Db::name('pdd_goods_cat') -> insert($val);
                }
            }

            $cate66 =[];
            if(empty(Session::get('insertcate46'))){
                $result5 = Db::name('pdd_goods_cat') -> where('level',3)
                    ->where('id','>',6443) -> where('id','<',7443) -> select();
                foreach ($result5 as $key => $val){
                    $result11  = $this -> pddarray->request('pdd.goods.cats.get',['parent_cat_id'=>$val['cat_id']]);
                    $cate46[$key] = $result11['goods_cats_get_response']['goods_cats_list'];
                    $cate66 = array_merge_recursive($cate66,$cate46[$key]);
                }
                Session::set('insertcate46',$cate66);
            }
            foreach (Session::get('insertcate46') as $key => $val){
                $val['create_time'] = date('Y-m-d H:i:s',time());
                $val['end_time'] = getday()['week'];
                $res = Db::name('pdd_goods_cat') -> where('cat_id',$val['cat_id']) -> find();
                if(empty($res)){
                    Db::name('pdd_goods_cat') -> insert($val);
                }
            }

            $cate67 =[];
            if(empty(Session::get('insertcate47'))){
                $result6 = Db::name('pdd_goods_cat') -> where('level',3)
                    ->where('id','>',7443) -> where('id','<',8443) -> select();
                foreach ($result6 as $key => $val){
                    $cate47[$key] = self::PddcateTree($val['cat_id']);
                    $cate67 = array_merge_recursive($cate67,$cate47[$key]);
                }
                Session::set('insertcate47',$cate67);
            }
            foreach (Session::get('insertcate47') as $key => $val){
                $val['create_time'] = date('Y-m-d H:i:s',time());
                $val['end_time'] = getday()['week'];
                $res = Db::name('pdd_goods_cat') -> where('cat_id',$val['cat_id']) -> find();
                if(empty($res)){
                    Db::name('pdd_goods_cat') -> insert($val);
                }
            }
            $cate68 =[];
            if(empty(Session::get('insertcate48'))){
                $result7 = Db::name('pdd_goods_cat') -> where('level',3)
                    ->where('id','>',8443) -> where('id','<',9345) -> select();
                foreach ($result7 as $key => $val){
                    $cate48[$key] = self::PddcateTree($val['cat_id']);
                    $cate68 = array_merge_recursive($cate68,$cate48[$key]);
                }
                Session::set('insertcate48',$cate68);
            }
            foreach (Session::get('insertcate48') as $key => $val){
                $val['create_time'] = date('Y-m-d H:i:s',time());
                $val['end_time'] = getday()['week'];
                $res = Db::name('pdd_goods_cat') -> where('cat_id',$val['cat_id']) -> find();
                if(empty($res)){
                    Db::name('pdd_goods_cat') -> insert($val);
                }
            }
        }
    }








    /**
     * evaluation_rules表
     * 当店铺初次授权生成初始化期望dsr值
     * @param $ownerId
     * @throws \think\Exception
     */
    public function saveInitDsr($ownerId){
        $db2 = Db::connect('pfpartner2');
        $evaluationRule['owner_id'] = $ownerId;
        $evaluationRule['default_evaluate'] = '1';
        $evaluationRule['remarks_evaluate'] = '1';
        $evaluationRule['dsr_score_describe'] = '5';
        $evaluationRule['dsr_score_logistics'] = '5';
        $evaluationRule['dsr_score_attitude'] = '5';
        $db2->name('evaluation_rules')->insert($evaluationRule);
    }

    /**
     * purchase_record表
     * 当店铺初次授权生成初始化免费试用记录
     * @param $ownerId
     * @param $mallName
     * @throws \think\Exception
     */
    public function saveFreeRecord($ownerId,$mallName){
        $db2 = Db::connect('pfpartner2');
        $initRecord['owner_id'] = $ownerId;
        $initRecord['mall_name'] = $mallName;
        $initRecord['data_date'] = date('Y-m-d');
        $initRecord['product_name'] = '免费试用';
        $initRecord['product_type'] = '2';
        $initRecord['payment_method'] = '2';
        $initRecord['product_details'] = '免费试用';
        $initRecord['start_time'] = date('Y-m-d H:i:s');
        $initRecord['end_time'] = date('Y-m-d H:i:s', strtotime('7 days'));
        $initRecord['day'] = '7';
        $initRecord['original_price'] = '0';
        $initRecord['discount_price'] = '0';
        $initRecord['actual_price'] = '0';
        $db2->name('purchase_record')->insert($initRecord);

    }
}
